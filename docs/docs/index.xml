<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术文档 on OpsSoluiton 开源方案</title>
    <link>/docs/</link>
    <description>Recent content in 技术文档 on OpsSoluiton 开源方案</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 29 Mar 2018 06:08:26 -0400</lastBuildDate>
    
	<atom:link href="/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mysql常用用法总结</title>
      <link>/docs/devops/mysql/</link>
      <pubDate>Thu, 29 Mar 2018 06:08:26 -0400</pubDate>
      
      <guid>/docs/devops/mysql/</guid>
      <description>版本 日期 状态 修订人 摘要     V1.0 2016-03-28 创建 HunterFu 创建文档    在日常工作中，会简单的使用一下mysql,故对常见命令操作总结一下，常用方式如下
mysqldump 命令的使用  备份和导出数据库
mysqldump -h database_ip -u Username -p --opt databasename &amp;gt; backup-file.sql  只导出数据库表结构
mysqldump -h database_ip -d -u Username -p databasename &amp;gt;database_structure.sql  只导出数据库中的某个表
mysqldump --opt --add-drop-table -u Username -p databasename tablename &amp;gt; dump.sql  如果不想手工输入密码 请使用--password 参数
mysqldump -h database_ip -u Username --password=123456 --opt databasename &amp;gt; backup-file.</description>
    </item>
    
    <item>
      <title>Python脚本知识总结</title>
      <link>/docs/devops/python_tips/</link>
      <pubDate>Thu, 29 Mar 2018 22:36:36 +0800</pubDate>
      
      <guid>/docs/devops/python_tips/</guid>
      <description>版本 日期 状态 修订人 摘要     V1.0 2016-03-28 创建 HunterFu 创建文档   V1.1 2017-08-07 修订 HunterFu 增加 指定占位符宽度(左对齐)    数据对象持久化 在某些时候，需要将数据对象的内容保存下来，方便下次程序启动时读取，这个就需要将对象持久化，请看如下例子
import pickle # create the test dictionary before_d = {} before_d[1]=&amp;quot;Name 1&amp;quot; before_d[2]=&amp;quot;Name 2&amp;quot; before_d[3]=&amp;quot;Name 3&amp;quot; # pickle dump the dictionary fout = open(&amp;quot;dict1.dat&amp;quot;, &amp;quot;w&amp;quot;) pickle.dump(before_d, fout, protocol=0) fout.close() # pickle load the dictionary fin = open(&amp;quot;dict1.dat&amp;quot;, &amp;quot;r&amp;quot;) after_d = pickle.</description>
    </item>
    
    <item>
      <title>Shell脚本知识总结</title>
      <link>/docs/devops/shell/</link>
      <pubDate>Fri, 30 Mar 2018 00:38:26 -0400</pubDate>
      
      <guid>/docs/devops/shell/</guid>
      <description>版本 日期 状态 修订人 摘要     V1.0 2016-03-28 创建 HunterFu 创建文档    在日常系统管理工作中，需要编写脚本来完成特定的功能，编写shell脚本是一个基本功了！
在编写的过程中，掌握一些常用的技巧和语法就可以完成大部分功能了，也就是2/8原则.
单引号和双引号的区别 单引号与双引号的最大不同在于双引号仍然可以引用变量的内容，但单引号内仅是 普通字符 ，不会作变量的引用，直接输出字符窜。请看如下例子：
 [root@linux ~]# name=HaHa [root@linux ~]# echo $name HaHa [root@linux ~]# myname=&amp;quot;$name is wow&amp;quot; [root@linux ~]# echo $myname HaHa is wow [root@linux ~]# myname=&#39;$name is wow&#39; [root@linux ~]# echo $myname $name is wow  从上面例子可以看出,使用了单引号的时候，那么$name只是普通字符,直接输出而已！
逐行读取文件  使用for循环来读取文件
for line in `cat file.txt` do echo $line done  注意:由于使用for来读入文件里的行时，会自动把空格和换行符作为一样分隔符，如果行里有空格的时候，输出的结果会很乱，所以只适用于行连续不能有空格或者换行符的文件</description>
    </item>
    
    <item>
      <title>Inotify监控文件系统事件</title>
      <link>/docs/security/inotify/</link>
      <pubDate>Fri, 30 Mar 2018 01:46:28 -0400</pubDate>
      
      <guid>/docs/security/inotify/</guid>
      <description>版本 日期 状态 修订人 摘要     V1.1 2016-03-28 创建 HunterFu 初始版本    Inotify 机制概述 Inotify 介绍 在日常的运维过程中，经常需要备份某些文件，或者对系统的某些文件进行监控，比如重要的配置文件等。如果需要作到实时同步或者监控，就需要使用内核的inotify机制
Inotify 是基于inode级别的文件系统监控技术,是一种强大的、细粒度的、异步的机制，它满足各种各样的文件监控需要，不仅限于安全和性能
 Inotify 不需要对被监视的目标打开文件描述符，而且如果被监视目标在可移动介质上，那么在 umount 该介质上的文件系统后，被监视目标对应的 watch 将被自动删除，并且会产生一个 umount 事件。 Inotify 既可以监视文件，也可以监视目录。 Inotify 使用系统调用而非 SIGIO 来通知文件系统事件。 Inotify 使用文件描述符作为接口，因而可以使用通常的文件 I/O 操作select 和 poll 来监视文件系统的变化。  Inotify 可监视的文件系统事件  IN_ACCESS : 即文件被访问 IN_MODIFY : 文件被 write IN_ATTRIB : 文件属性被修改，如 chmod、chown、touch 等 IN_CLOSE_WRITE : 可写文件被 close IN_CLOSE_NOWRITE : 不可写文件被 close IN_OPEN : 文件被open IN_MOVED_FROM : 文件被移走,如 mv IN_MOVED_TO : 文件被移来，如 mv、cp IN_CREATE : 创建新文件 IN_DELETE : 文件被删除，如 rm IN_DELETE_SELF : 自删除，即一个可执行文件在执行时删除自己 IN_MOVE_SELF : 自移动，即一个可执行文件在执行时移动自己 IN_UNMOUNT : 宿主文件系统被 umount IN_CLOSE : 文件被关闭，等同于(IN_CLOSE_WRITE | IN_CLOSE_NOWRITE) IN_MOVE : 文件被移动，等同于(IN_MOVED_FROM | IN_MOVED_TO)  注：上面所说的文件也包括目录</description>
    </item>
    
  </channel>
</rss>